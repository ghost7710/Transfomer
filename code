import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
import matplotlib.pyplot as plt
import math


#7
class ScaledDotProductAttention(nn.Module):
    def __init__(self):
        super(ScaledDotProductAttention, self).__init__()
    def forward(self, Q, K, V, attn_mask):
        #输入进来的维度为：Q:[batch_size x n_heads x len_q x d_k];以此类推
        #经过matmul得到scores:[batch_size x n_heads x len_q x len_k]
        scores = torch.matmul(Q, K.transpose(-1, -2))/np.sqrt(d_k)

        #关键点：attn_mask , 把被mask的地方置为无限小，sotfmax后基本为0，为单词q不起作用
        scores.mask_fill_(attn_mask, -1e9)
        attn = nn.Softmax(dim=-1)(scores)
        context = torch.matmul(attn, V)
        return context, attn

#6
class MultiHeadAttention(nn.Module):
    def __init__(self):
        super(MultiHeadAttention, self).__init__()
        self.W_Q = nn.Linear(d_model, d_k * n_heads)
        self.W_K = nn.Linear(d_model, d_k * n_heads)
        self.W_V = nn.Linear(d_model, d_v * n_heads)
        self.linear = nn.Linear(n_heads * d_v, d_model)
        self.layer_norm = nn.LayerNorm(d_model)
    def forward(self, Q, K, V, attn_mask):
        #形状Q[batch_size x len_q x d_model]；其他类似，这里自注意力len_q和len_k相等
        residual, batch_size = Q, Q.size(0)
        #（B，S,D) -proj ->(B,S,D) -split ->(B，S，H ,W） -trans ->(B,S,H.W)

        #下列先映射，后分头；qk分头后维度一致，这里都为d_k
        q_s = self.W_Q(Q).view(batch_size, -1, n_heads, d_k).transpose(1, 2) #q_s:[batch_size x n_heads x len_q x d_k]
        k_s = self.W_K(K).view(batch_size, -1, n_heads, d_k).transpose(1, 2)
        v_s = self.W_V(V).view(batch_size, -1, n_heads, d_k).transpose(1, 2)

        #输入进行的attn_mask形状是batch_size x len_q x len_k,经过下列这行代码得到新的attn_mask:[batch_size x n_heads x len_q x len_k],就是把pad信息重复到n个头上            attn_mask = attn_mask.unsqueeze(1).repeat(1, n_heads, 1, 1)
        #函数7，实现softmax
        context, attn = ScaledDotProductAttention()(q_s, k_s, v_s, attn_mask)
        context= context.transpose(1, 2).contiguous().view(batch_size, -1,n_heads*d_v)
        output = self.linear(context)
        return self.layer_norm(output + residual), attn

#8
class PoswiseFeedForwardNet():
    def __init__(self):
        super(PoswiseFeedForwardNet, self).__init__()
        self.conv1 = nn.Conv1d(in_channels=d_model, out_channels=d_ff, kernel_size=1)
        self.conv2 = nn.Conv1d(in_channels=d_ff, out_channels=d_model, kernel_size=1)
        self.layer_norm = nn.LayerNorm(d_model)

    def forward(self, inputs):
        residual = inputs
        output = nn.ReLU()(self.conv1(inputs.transpose(1, 2)))
        output = self.conv2(output).transpose(1, 2)
        return self.layer_norm(output + residual)





# 4
def get_attn_pad_mask(seq_q, seq_k):
    batch_size, len_q = seq_q.size()
    batch_size ,len_k = seq_k.size()
    #eq(zero) is PAD token
    pad_attn_mask = seq_k.data.eq(0).unsqueeze(1) #batch_size*1*len_k,one is masking
    #pad对应0，将0的位置转化为true，true即是1
    return pad_attn_mask.expand(batch_size, len_q, len_k) #batch_size*len_q*len_k

#3
class PositionalEncoding(nn.Module):
    def __init__(self, d_model, dropout=0.1, max_len=5000):
        super(PositionalEncoding, self).__init__()
        ## 位置编码对照公式敲代码
        # Positional Encoding就是句子中词语相对位置的编码，让Transformer保留词语的位置信息
        # 需要注意的是偶数和奇数在公式上有共同部分，我们使用lod函数把次方拿下来，方便计算
        # d_model为512，那么公式中pos代表从0到511，2i中的i则从0取到255，2i对应0，2，4，6....510
        self.dropout = nn.Dropout(p=dropout)

        pe = torch.zeros(max_len,d_model)
        position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)
        div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model))
        pe[:, 0::2] = torch.sin(position * div_term)#pe[:, 0::2]表示从0开始补长为2，所以为取偶数
        pe[:, 1::2] = torch.cos(position * div_term)#pe[:, 1::2]表示从1开始补长为2，所以为取奇数
        #得到pe形状为[max_len*d_model]
        pe = pe.unsqueeze(0).transpose(0, 1) #得到pe形状[max_len*1*d_model]
        # pe.requires_grad = False
        self.register_buffer('pe', pe)  #定义一个缓冲区，简单理解为参数不更新
    def forward(self, x):
        '''
        x: [seq_len,batch_size,d_model]
        '''
        x = x + self.pe[:x.size(0), :]
        return self.dropout(x)

#5
class EncoderLayer(nn.Module):
    def __init__(self):
        super(EncoderLayer, self).__init__()
        self.enc_self_attn = MultiHeadAttention()
        self.pos_ffn = PoswiseFeedForwardNet() #前馈神经网络即Linear层
    def forward(self, enc_inputs, enc_self_attn_mask):
        #下面即自注意力层，输入是enc_inputs,形状是[batch_size*seq_len_q*d_model],需注意最初始的QKV矩阵是等同于输入的，enc_self_attn函数6
        enc_outputs, attn = self.enc_self_attn(enc_inputs, enc_inputs, enc_inputs, enc_self_attn_mask) #enc_inputs to same Q，K， V
        enc_outputs =self.pos_ffn(enc_outputs)
        return enc_outputs, attn
    #2
class Encoder(nn.Module):
    def __init__(self):
        super(Encoder, self).__init__()
        self.sec_emb = nn.Embedding(scr_vocab_len, d_model) #生成一个矩阵，大小是sce_len * d_model
        self.pos_emb = PositionalEncoding(d_model) #位置编码情况，这里是固定的正弦函数，也可以使用类似词向量的nn.Embedding获得一个可以更新学习的位置编码
        self.layers = nn.ModuleList([EncoderLayer() for _ in range(n_layers)]) #使用modulelist对多个encoder进行堆叠，因为后续的encoder没有使用词向量和位置编码，所以抽离出来
    def forward(self,enc_inputs):
        #enc_inputs形状是[batch_size*scr_len]

        #下面代码通过sce_emb，进行索引定位，enc_outputs形状是[batch_size,sce_len,d_model]
        enc_outputs = self.scr_emb(enc_inputs)
        #位置编码
        enc_outputs = self.pos_emb(enc_outputs.transpose(0, 1).transpose(0, 1))

        #get_attn_pad_mask  是为了得到句子中padding的位置信息，给到模型后mian，在计算自注意力和交互注意力的时候去掉pad符号的影响,函数4
        enc_self_attn_mask = get_attn_pad_mask(enc_inputs, enc_inputs)
        enc_self_attns = []
        for layers in self.layers: #循环
            #函数5
            enc_outputs, enc_self_attns = layers(enc_outputs, enc_self_attn_mask)
            enc_self_attns.append(enc_self_attns)
            return enc_outputs, enc_self_attns

#9Decoder
class Decoder(nn.Module):
    def __init__(self):
        super(Decoder, self).__init__()
        self.tgt_emb = nn.Embedding(tgt_vocab_len, d_model)
        self.pos_emb = PositionalEncoding(d_model)
        self.layers = nn.ModuleList([DecoderLayer() for _ in range(n_layers)])
    def forward(self, dec_inputs, enc_inputs, enc_outputs):#enc_inputs在交互时告诉解码端哪些是pad符号
        dec_outputs = self.tgt_emb(enc_inputs)
        dec_outputs = self.pos_emb(enc_inputs.transpose(0, 1)).transpose(0, 1)

        dec_self_attn_pad_mask = get_attn_pad_mask(dec_inputs, dec_inputs) #mask自注意力层pad部分
        dec_self_attn_subsequent_mask = get_attn_subsequent_mask(dec_inputs) #自注意力层mask未来时刻单词，形成上三角为1的矩阵

        dec_self_attn_mask = torch.gt((dec_self_attn_pad_mask+dec_self_attn_subsequent_mask), 0)#两个矩阵相加，大于0的为1，其余为0，为1的会被fill为无限小
        #交互注意力层中的mask机制，enc输入是k，找到k中的pad符号，给到后面模型，不需要管q中的pad符号
        dec_enc_attn_mask = get_attn_pad_mask(dec_inputs, enc_inputs)

        dec_self_attns, dec_enc_attns = [], []

        for layer in self.layers:
            dec_outputs, dec_self_attn, dec_enc_attn = layer(dec_outputs, enc_outputs, dec_self_attn_mask, dec_enc_attn_mask)
            dec_self_attns.append(dec_self_attn)
            dec_enc_attns.append(dec_enc_attn)
        return dec_outputs, dec_self_attns, dec_enc_attns

#10
class DecoderLayer(nn.Module):
    def __init__(self):
        super(DecoderLayer, self).__init__()
        self.dec_self_attn = MultiHeadAttention()
        self.dec_enc_attn = MultiHeadAttention()
        self.pos_ffn = PoswiseFeedForwardNet()

    def forward(self, dec_inputs, enc_outputs, dec_self_attn_mask, dec_enc_attn_mask):
        dec_outputs, dec_self_attn = self.dec_self_attn(dec_inputs, dec_inputs, dec_inputs, dec_self_attn_mask)
        dec_outputs, dec_enc_attn = self.dec_enc_attn(dec_outputs, enc_outputs, enc_outputs, dec_enc_attn_mask)
        dec_outputs = self.pos_ffn(dec_outputs)
        return dec_outputs, dec_self_attn, dec_enc_attn




#1
class transformer(nn.Module):
    def __init__(self):
        super(transformer, self).__init__()
        self.encoder = Encoder() #编码层
        self.decoder = Decoder() #解码层
        self.projection = nn.Linear(d_model, tgt_vocab_len, bias=False) #输出层d_model是我们解码层每个token输出的维度大小，之后会做一个tgt_vocab_len大小的softmax
        #projection作用是看那个词的出现概率最大
    def forward(self,enc_inputs, dec_inputs):
        #enc_inputs形状为[batch_size*scr_len],dec_inputs形状为[batch_size*tgt_len]

        #enc_self_attns是QK转置相乘后softmax后的矩阵值
        enc_outputs, enc_self_attns = self.encoder(enc_inputs)

        #dec_outputs是decoder的主要输出，用于后续的Linear映射，dec_self_attns类比于enc_self_attns是查看每个单词对decoder中输入的其余单词的相关性，dec_enc_attns是decoder中每个单词对encoder单词的相关性
        dec_outputs, dec_self_attns, dec_enc_attns = self.decoder(dec_inputs, enc_inputs, enc_outputs)

        #dec_outputs映射到词表大小
        dec_logits = self.projection(dec_outputs)#dec_logits:batch_size * scr_len * tgt_len
        return dec_logits.view(-1, dec_logits.szie(-1)), enc_self_attns, dec_self_attns, dec_enc_attns

if '__name__' == '__main':
    sentences = ['ich mochte ein bier P', 'S i want a beer', 'i want a beer E']  # batch_size=1
    # 构建词表
    scr_vocab = {'P': 0, 'ich': 1, 'mochte': 2, 'ein': 3, 'bier': 4}
    scr_vocab_len = len(scr_vocab)

    tgt_vocab = {'P': 0, 'i': 1, 'want': 2, 'a': 3, 'beer': 4, 'S': 5, 'E': 6}
    tgt_vocab_len = len(tgt_vocab)

        # 模型参数
    d_model = 512  # embedding size
    d_ff = 2048  # feedforwarf dimension
    d_k = d_v = 64  # dimension of KQV
    n_layers = 6  # number of encoder or decoder layers
    n_heads = 8  # number of heads in Muti-Head Attention

    model = transformer()

    criterion = nn.CrossEntropyLoss()
    optimzer = optim.Adam(model.parameters(), lr=0.001)

    enc_inputs, dec_inputs, target_batch = make_batch(sentences)

    for epoch in range(20):
        optimzer.zero_grad()
        outputs, enc_self_attns, dec_self_attns, dec_enc_attns = model(enc_inputs, dec_inputs)
        loss = criterion(outputs, target_batch.contiguous().view(-1))
        print('Epoch:','%04d' % (epoch+1), 'cost=','{:.6f}'.format(loss))
        loss.backward()
        optimzer.step()
